{
  "language": "Solidity",
  "sources": {
    "contracts/the-garden/TheGarden.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0\npragma solidity >=0.8.9;\n\ncontract TheGarden {\n  event IpfsHashAdded(string ipfsHash, uint256 ipfsHashIndex, address proposer);\n  event IpfsHashApproved(string ipfsHash, uint256 ipfsHashIndex, address acceptor);\n  event AcceptorAdded(address acceptor, uint256 acceptorIndex);\n  event AcceptorRemoved(address acceptor, uint256 acceptorIndex);\n\n\n  address public owner;\n\n  uint256 public acceptorsCount;\n  mapping(uint256 => address) public acceptors;\n\n  uint256 public ipfsHashCount;\n  mapping(uint256 => string) public ipfsHashes;\n  mapping(uint256 => address) public ipfsHashProposers;\n\n  constructor() {\n    owner = msg.sender;\n    acceptors[0] = msg.sender;\n    acceptorsCount = 1;\n    ipfsHashCount = 0;\n  }\n\n  function _isAcceptor(address _address) private view returns (bool) {\n    for (uint256 i = 0; i < acceptorsCount; i++) {\n      if (acceptors[i] == _address) {\n        return true;\n      }\n    }\n    return false;\n  } \n\n  modifier onlyAcceptors() {\n    require(_isAcceptor(msg.sender), \"Only acceptors can perform this action\");\n    _;\n  }\n\n  modifier onlyOwner() {\n    require(msg.sender == owner, \"Only owner can perform this action\");\n    _;\n  }\n\n  function addIpfsHash(string memory _ipfsHash) public {\n    ipfsHashes[ipfsHashCount] = _ipfsHash;\n    ipfsHashProposers[ipfsHashCount] = msg.sender;\n    emit IpfsHashAdded(_ipfsHash, ipfsHashCount, msg.sender);\n    ipfsHashCount += 1;\n  }\n\n  function approveIpfsHash(uint256 _ipfsHashIndex) public onlyAcceptors {\n    require(\n      msg.sender == owner || msg.sender != ipfsHashProposers[_ipfsHashIndex],\n      \"Can't accept your own proposal\"\n    );\n\n    emit IpfsHashApproved(ipfsHashes[_ipfsHashIndex], _ipfsHashIndex, msg.sender);\n\n    if (!_isAcceptor(ipfsHashProposers[_ipfsHashIndex])) {\n      acceptors[acceptorsCount] = ipfsHashProposers[_ipfsHashIndex];\n      emit AcceptorAdded(ipfsHashProposers[_ipfsHashIndex], acceptorsCount);\n      acceptorsCount += 1;\n    }\n  }\n\n  function removeAcceptor(uint256 _acceptorIndex) public onlyOwner {\n    acceptors[_acceptorIndex] = address(0);\n    emit AcceptorRemoved(acceptors[_acceptorIndex], _acceptorIndex);\n  }\n}\n"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": true,
      "runs": 200
    },
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "storageLayout",
          "evm.gasEstimates"
        ],
        "": [
          "ast"
        ]
      }
    },
    "metadata": {
      "useLiteralContent": true
    }
  }
}