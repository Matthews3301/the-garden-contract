{
  "language": "Solidity",
  "sources": {
    "contracts/examples/AdvertisingBoard.sol": {
      "content": "// SPDX-License-Identifier: UNLICENSED\npragma solidity ^0.8.0;\n\ncontract AdvertisingBoard {\n    IOpsProxyFactory public immutable opsProxyFactory;\n    mapping(address => string) public messages;\n\n    constructor(IOpsProxyFactory _opsProxyFactory) {\n        opsProxyFactory = _opsProxyFactory;\n    }\n\n    function postMessage(string calldata _message) external {\n        messages[msg.sender] = _message;\n    }\n\n    function viewMessage(address _eoa) external view returns (string memory) {\n        (address dedicatedMsgSender, ) = opsProxyFactory.getProxyOf(_eoa);\n\n        return messages[dedicatedMsgSender];\n    }\n}\n\ninterface IOpsProxyFactory {\n    /**\n     * @return address Proxy address owned by account.\n     * @return bool Whether if proxy is deployed\n     */\n    function getProxyOf(address account) external view returns (address, bool);\n}\n"
    },
    "contracts/examples/CoingeckoOracle.sol": {
      "content": "// SPDX-License-Identifier: UNLICENSED\npragma solidity ^0.8.0;\n\ncontract CoingeckoOracle {\n    uint256 public price;\n    uint256 public lastUpdated;\n\n    event PriceUpdated(uint256 indexed timeStamp, uint256 price);\n\n    function updatePrice(uint256 _price) external {\n        price = _price;\n        lastUpdated = block.timestamp;\n\n        emit PriceUpdated(block.timestamp, _price);\n    }\n}\n"
    },
    "contracts/gathering/Gathering.sol": {
      "content": "// SPDX-License-Identifier: UNLICENSED\npragma solidity ^0.8.0;\n\ncontract Gathering {\n    event HashAdded();\n\n    address public owner;\n    string public ipfsHash;\n    bool public hashSet;\n\n    constructor() {\n        owner = msg.sender;\n    }\n\n    modifier onlyOwner() {\n        require(msg.sender == owner, \"Only owner can perform this action\");\n        _;\n    }\n\n    function setIPFSHash(string memory _ipfsHash) public onlyOwner {\n        ipfsHash = _ipfsHash;\n        hashSet = true;\n        emit HashAdded();\n    }\n\n    function deleteIPFSHash() public onlyOwner {\n        require(hashSet, \"IPFS hash not set\");\n        ipfsHash = \"\";\n        hashSet = false;\n    }\n}"
    },
    "contracts/the-garden/TheGarden.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0\npragma solidity >=0.8.9;\n\ncontract TheGarden {\n  event IpfsHashAdded(string ipfsHash, address proposer);\n  event IpfsHashApproved(uint256 ipfsHashIndex, address acceptor);\n  event AcceptorAdded(address acceptor);\n\n\n  uint256 public acceptorsCount;\n  mapping(uint256 => address) public acceptors;\n\n  string public approvedIpfsHash;\n  uint256 public ipfsHashCount;\n  mapping(uint256 => string) public ipfsHashes;\n  mapping(uint256 => address) public ipfsHashProposers;\n\n  constructor() {\n    acceptors[0] = msg.sender;\n    acceptorsCount = 1;\n    approvedIpfsHash = \"\";\n    ipfsHashCount = 0;\n  }\n\n  function _checkAcceptor(address _address) private view returns (bool) {\n    for (uint256 i = 0; i < acceptorsCount; i++) {\n      if (acceptors[i] == _address) {\n        return true;\n      }\n    }\n    return false;\n  } \n\n  modifier onlyAcceptors() {\n    require(_checkAcceptor(msg.sender), \"Only acceptors can perform this action\");\n    _;\n  }\n\n  function addIpfsHash(string memory _ipfsHash) public {\n    ipfsHashes[ipfsHashCount] = _ipfsHash;\n    ipfsHashProposers[ipfsHashCount] = msg.sender;\n    ipfsHashCount += 1;\n    emit IpfsHashAdded(_ipfsHash, msg.sender);\n  }\n\n  function approveIpfsHash(uint256 _ipfsHashIndex) public onlyAcceptors {\n    approvedIpfsHash = ipfsHashes[_ipfsHashIndex];\n    emit IpfsHashApproved(_ipfsHashIndex, msg.sender);\n    if (!_checkAcceptor(ipfsHashProposers[_ipfsHashIndex])) {\n      acceptors[acceptorsCount] = ipfsHashProposers[_ipfsHashIndex];\n      acceptorsCount += 1;\n      emit AcceptorAdded(ipfsHashProposers[_ipfsHashIndex]);\n    }\n  }\n\n}\n"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": true,
      "runs": 200
    },
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "storageLayout",
          "evm.gasEstimates"
        ],
        "": [
          "ast"
        ]
      }
    },
    "metadata": {
      "useLiteralContent": true
    }
  }
}