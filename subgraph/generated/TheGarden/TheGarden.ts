// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt,
} from "@graphprotocol/graph-ts";

export class AcceptorAdded extends ethereum.Event {
  get params(): AcceptorAdded__Params {
    return new AcceptorAdded__Params(this);
  }
}

export class AcceptorAdded__Params {
  _event: AcceptorAdded;

  constructor(event: AcceptorAdded) {
    this._event = event;
  }

  get acceptor(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get acceptorIndex(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }
}

export class AcceptorRemoved extends ethereum.Event {
  get params(): AcceptorRemoved__Params {
    return new AcceptorRemoved__Params(this);
  }
}

export class AcceptorRemoved__Params {
  _event: AcceptorRemoved;

  constructor(event: AcceptorRemoved) {
    this._event = event;
  }

  get acceptor(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get acceptorIndex(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }
}

export class IpfsHashAccepted extends ethereum.Event {
  get params(): IpfsHashAccepted__Params {
    return new IpfsHashAccepted__Params(this);
  }
}

export class IpfsHashAccepted__Params {
  _event: IpfsHashAccepted;

  constructor(event: IpfsHashAccepted) {
    this._event = event;
  }

  get ipfsHash(): string {
    return this._event.parameters[0].value.toString();
  }

  get ipfsHashIndex(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get acceptor(): Address {
    return this._event.parameters[2].value.toAddress();
  }
}

export class IpfsHashAdded extends ethereum.Event {
  get params(): IpfsHashAdded__Params {
    return new IpfsHashAdded__Params(this);
  }
}

export class IpfsHashAdded__Params {
  _event: IpfsHashAdded;

  constructor(event: IpfsHashAdded) {
    this._event = event;
  }

  get ipfsHash(): string {
    return this._event.parameters[0].value.toString();
  }

  get ipfsHashIndex(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get proposer(): Address {
    return this._event.parameters[2].value.toAddress();
  }
}

export class TheGarden extends ethereum.SmartContract {
  static bind(address: Address): TheGarden {
    return new TheGarden("TheGarden", address);
  }

  acceptors(param0: BigInt): Address {
    let result = super.call("acceptors", "acceptors(uint256):(address)", [
      ethereum.Value.fromUnsignedBigInt(param0),
    ]);

    return result[0].toAddress();
  }

  try_acceptors(param0: BigInt): ethereum.CallResult<Address> {
    let result = super.tryCall("acceptors", "acceptors(uint256):(address)", [
      ethereum.Value.fromUnsignedBigInt(param0),
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  acceptorsCount(): BigInt {
    let result = super.call("acceptorsCount", "acceptorsCount():(uint256)", []);

    return result[0].toBigInt();
  }

  try_acceptorsCount(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "acceptorsCount",
      "acceptorsCount():(uint256)",
      [],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  ipfsHashCount(): BigInt {
    let result = super.call("ipfsHashCount", "ipfsHashCount():(uint256)", []);

    return result[0].toBigInt();
  }

  try_ipfsHashCount(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "ipfsHashCount",
      "ipfsHashCount():(uint256)",
      [],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  ipfsHashProposers(param0: BigInt): Address {
    let result = super.call(
      "ipfsHashProposers",
      "ipfsHashProposers(uint256):(address)",
      [ethereum.Value.fromUnsignedBigInt(param0)],
    );

    return result[0].toAddress();
  }

  try_ipfsHashProposers(param0: BigInt): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "ipfsHashProposers",
      "ipfsHashProposers(uint256):(address)",
      [ethereum.Value.fromUnsignedBigInt(param0)],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  ipfsHashes(param0: BigInt): string {
    let result = super.call("ipfsHashes", "ipfsHashes(uint256):(string)", [
      ethereum.Value.fromUnsignedBigInt(param0),
    ]);

    return result[0].toString();
  }

  try_ipfsHashes(param0: BigInt): ethereum.CallResult<string> {
    let result = super.tryCall("ipfsHashes", "ipfsHashes(uint256):(string)", [
      ethereum.Value.fromUnsignedBigInt(param0),
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toString());
  }

  owner(): Address {
    let result = super.call("owner", "owner():(address)", []);

    return result[0].toAddress();
  }

  try_owner(): ethereum.CallResult<Address> {
    let result = super.tryCall("owner", "owner():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }
}

export class ConstructorCall extends ethereum.Call {
  get inputs(): ConstructorCall__Inputs {
    return new ConstructorCall__Inputs(this);
  }

  get outputs(): ConstructorCall__Outputs {
    return new ConstructorCall__Outputs(this);
  }
}

export class ConstructorCall__Inputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }
}

export class ConstructorCall__Outputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }
}

export class AcceptIpfsHashCall extends ethereum.Call {
  get inputs(): AcceptIpfsHashCall__Inputs {
    return new AcceptIpfsHashCall__Inputs(this);
  }

  get outputs(): AcceptIpfsHashCall__Outputs {
    return new AcceptIpfsHashCall__Outputs(this);
  }
}

export class AcceptIpfsHashCall__Inputs {
  _call: AcceptIpfsHashCall;

  constructor(call: AcceptIpfsHashCall) {
    this._call = call;
  }

  get _ipfsHashIndex(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class AcceptIpfsHashCall__Outputs {
  _call: AcceptIpfsHashCall;

  constructor(call: AcceptIpfsHashCall) {
    this._call = call;
  }
}

export class AddIpfsHashCall extends ethereum.Call {
  get inputs(): AddIpfsHashCall__Inputs {
    return new AddIpfsHashCall__Inputs(this);
  }

  get outputs(): AddIpfsHashCall__Outputs {
    return new AddIpfsHashCall__Outputs(this);
  }
}

export class AddIpfsHashCall__Inputs {
  _call: AddIpfsHashCall;

  constructor(call: AddIpfsHashCall) {
    this._call = call;
  }

  get _ipfsHash(): string {
    return this._call.inputValues[0].value.toString();
  }
}

export class AddIpfsHashCall__Outputs {
  _call: AddIpfsHashCall;

  constructor(call: AddIpfsHashCall) {
    this._call = call;
  }
}

export class RemoveAcceptorCall extends ethereum.Call {
  get inputs(): RemoveAcceptorCall__Inputs {
    return new RemoveAcceptorCall__Inputs(this);
  }

  get outputs(): RemoveAcceptorCall__Outputs {
    return new RemoveAcceptorCall__Outputs(this);
  }
}

export class RemoveAcceptorCall__Inputs {
  _call: RemoveAcceptorCall;

  constructor(call: RemoveAcceptorCall) {
    this._call = call;
  }

  get _acceptorIndex(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class RemoveAcceptorCall__Outputs {
  _call: RemoveAcceptorCall;

  constructor(call: RemoveAcceptorCall) {
    this._call = call;
  }
}
